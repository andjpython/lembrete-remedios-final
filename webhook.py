@app.route("/webhook", methods=["POST", "HEAD"])
def responder():
    if request.method == "HEAD":
        return "", 200

    mensagem = request.values.get("Body", "").strip()
    numero = request.values.get("From", "desconhecido")
    resposta = MessagingResponse()
    texto = normalizar(mensagem)

    remedios = carregar_json(REMEDIOS_ARQUIVO)
    historico = carregar_json(HISTORICO_ARQUIVO)
    hoje = agora_br().strftime("%Y-%m-%d")
    hora_atual = agora_br().strftime("%H:%M")

    # Lista de nomes v√°lidos
    nomes_validos = [r["nome"].lower() for r in remedios]

    # Tentativa de aproxima√ß√£o de nomes
    def corrigir_nome(nome_digitado):
        match = difflib.get_close_matches(nome_digitado.lower(), nomes_validos, n=1, cutoff=0.6)
        return match[0].title() if match else nome_digitado.title()

    # === LISTAR REM√âDIOS DO DIA ===
    comandos_dia = [
        "rem√©dio tenho que tomar", "quais remedios", "rem√©dios de hoje",
        "quais faltam", "falta algum", "o que falta", "qual n√£o tomei"
    ]
    if any(comando in texto for comando in comandos_dia):
        resposta.message(f"üìã Hoje voc√™ ainda precisa tomar:\n{listar_remedios_do_dia(remedios)}")
        return str(resposta)

    # === LISTAR J√Å TOMADOS ===
    if "o que j√° tomei" in texto or "j√° tomei" in texto:
        confirmados = [c for c in historico.get("confirmacoes", []) if c["data"] == hoje and c.get("confirmado")]
        if confirmados:
            lista = "\n".join(f"- {c['remedio']} √†s {c['hora']}" for c in confirmados)
            resposta.message(f"‚úÖ Hoje voc√™ j√° tomou:\n{lista}")
        else:
            resposta.message("üì≠ Nenhum rem√©dio confirmado hoje ainda.")
        return str(resposta)

    # === CONFIRMA√á√ÉO: "tomei o Lipidil"
    match = re.search(r"tomei o ([\w\s\-]+)", texto)
    if match:
        nome_digitado = match.group(1).strip()
        remedio_nome = corrigir_nome(nome_digitado)
        historico.setdefault("confirmacoes", []).append({
            "data": hoje,
            "hora": hora_atual,
            "remedio": remedio_nome,
            "confirmado": True
        })
        salvar_json(HISTORICO_ARQUIVO, historico)
        atualizar_contexto(numero, "tomei", remedio=remedio_nome, hora=hora_atual)
        resposta.message(f"üíä Marquei que voc√™ tomou *{remedio_nome}* √†s {hora_atual}.")
        return str(resposta)

    # === NEGA√á√ÉO: "n√£o tomei o Lipidil"
    match = re.search(r"n√£o tomei o ([\w\s\-]+)", texto)
    if match:
        nome_digitado = match.group(1).strip()
        remedio_nome = corrigir_nome(nome_digitado)
        historico.setdefault("pendencias", []).append({
            "data": hoje,
            "horario": hora_atual,
            "remedio": remedio_nome,
            "status": "pendente",
            "tentativas": 0
        })
        salvar_json(HISTORICO_ARQUIVO, historico)
        atualizar_contexto(numero, "nao_tomei", remedio=remedio_nome)
        resposta.message(f"üïê Marquei que *{remedio_nome}* ainda est√° pendente.")
        return str(resposta)

    # === CORRE√á√ÉO: "corrige, tomei o [rem√©dio] √†s [hora]"
    match = re.search(r"corrige.*tomei o ([\w\s\-]+) √†s (\d{2}:\d{2})", texto)
    if match:
        nome_digitado = match.group(1).strip()
        hora_corrigida = match.group(2)
        remedio_nome = corrigir_nome(nome_digitado)
        historico.setdefault("confirmacoes", []).append({
            "data": hoje,
            "hora": hora_corrigida,
            "remedio": remedio_nome,
            "confirmado": True
        })
        salvar_json(HISTORICO_ARQUIVO, historico)
        atualizar_contexto(numero, "corrige", remedio=remedio_nome, hora=hora_corrigida)
        resposta.message(f"üîÅ Corrigido! Voc√™ tomou *{remedio_nome}* √†s {hora_corrigida}.")
        return str(resposta)

    # === ERRO: "errei, n√£o tomei o Lipidil"
    match = re.search(r"errei.*n√£o tomei o ([\w\s\-]+)", texto)
    if match:
        nome_digitado = match.group(1).strip()
        remedio_nome = corrigir_nome(nome_digitado)
        historico["confirmacoes"] = [
            c for c in historico.get("confirmacoes", [])
            if not (c["data"] == hoje and c["remedio"].lower() == remedio_nome.lower())
        ]
        salvar_json(HISTORICO_ARQUIVO, historico)
        atualizar_contexto(numero, "errei", remedio=remedio_nome)
        resposta.message(f"‚ö†Ô∏è Ok! Apaguei a confirma√ß√£o do *{remedio_nome}*.")
        return str(resposta)

    # === DEFAULT
    comandos = (
        "üîç Exemplos de comandos:\n"
        "- *tomei o Lipidil*\n"
        "- *n√£o tomei o Zyloric*\n"
        "- *quais faltam?*\n"
        "- *o que j√° tomei?*\n"
        "- *errei, n√£o tomei o [rem√©dio]*\n"
        "- *corrige, tomei o [rem√©dio] √†s [hora]*"
    )
    resposta.message(f"{gerar_saudacao_com_hora()}\n\n{erro_engracado()}\n\n{comandos}")
    return str(resposta)
